package Model;

import java.util.Collection;
import java.util.List;
import static java.util.Objects.nonNull;
import static java.util.Objects.isNull;
import static Model.GameStatusEnum.COMPLETE;
import static Model.GameStatusEnum.INCOMPLETE;
import static Model.GameStatusEnum.NON_STARTED;

public class Board{
	
	private final List<List<Space>> spaces;

	public Board(List<List<Space>> spaces) {
		this.spaces = spaces;
	}

	public List<List<Space>> getSpaces() {
		return spaces;
	}
	
	
	public GameStatusEnum getStatus() {
		if (spaces.stream().flatMap(Collection::stream).noneMatch(s -> !s.isFixed() && nonNull(s.getActual()))) {
			return COMPLETE;
		}
		
		return spaces.stream().flatMap(Collection::stream).anyMatch(s -> isNull(s.getActual())) ? INCOMPLETE : COMPLETE;
	}
	
	public boolean hasErrors() {
		if(getStatus() == NON_STARTED) {
			return false;
		}
		return spaces.stream().flatMap(Collection::stream)
					.anyMatch(s -> nonNull(s.getActual() && !s.getActual().equals(s.getExpected()));
		
	}
	
	public boolean changeValue(final int col, int final row) {
		
	}
	
	
}
